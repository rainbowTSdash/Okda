from .. import loader, utils
from telethon.tl.types import PeerUser, PeerChat, PeerChannel
import asyncio

@loader.tds
class MassSendMod(loader.Module):
    strings = {
        "name": "MassSender",
        "chats_set": "‚úÖ –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!",
        "no_text": "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!",
        "sending": "üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...",
        "sent_to": "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat}",
        "error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á–∞—Ç {chat}: {error}",
        "no_chats": "‚ùå –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø—É—Å—Ç! –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —á–∞—Ç—ã –∫–æ–º–∞–Ω–¥–æ–π .rcfg",
        "done": "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            "CHATS", [], "–°–ø–∏—Å–æ–∫ —é–∑–µ—Ä–Ω–µ–π–º–æ–≤ —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (@username)"
        )

    @loader.command()
    async def rcfg(self, message):
        args = utils.get_args_raw(message).split()
        chat_usernames = []
        
        for arg in args:
            if arg.startswith('@'):
                try:
                    entity = await self.client.get_entity(arg)
                    if isinstance(entity, (PeerUser, PeerChat, PeerChannel)):
                        chat_usernames.append(arg)
                except (ValueError, Exception):
                    continue
                
        self.config["CHATS"] = chat_usernames
        await utils.answer(message, self.strings["chats_set"])

    @loader.command()
    async def rass(self, message):
        text = utils.get_args_raw(message)
        
        if not text:
            await utils.answer(message, self.strings["no_text"])
            return
            
        if not self.config["CHATS"]:
            await utils.answer(message, self.strings["no_chats"])
            return
            
        await utils.answer(message, self.strings["sending"])
        
        for chat in self.config["CHATS"]:
            try:
                await self.client.send_message(chat, text)
                await utils.answer(message, self.strings["sent_to"].format(chat=chat))
                await asyncio.sleep(1)
            except Exception as e:
                await utils.answer(message, self.strings["error"].format(
                    chat=chat,
                    error=str(e)
                ))
                
        await utils.answer(message, self.strings["done"])
